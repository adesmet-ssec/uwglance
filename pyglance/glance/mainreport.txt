<%doc>
This Mako template is intended to create a summary report page for glance reportGen.

Created by Eva Schiffer Jun 2009.
Copyright (c) 2009 University of Wisconsin SSEC. All rights reserved.
</%doc>

<%!
    import glance.report as report
%>

<title>Spacial File Comparison</title>
</head>
<body>
    
    <h2>Comparison Summary</h2>
    
    <p>
        % if 'version' in runInfo :
            report produced with ${runInfo['version']} <br>
        % endif
        comparison generated ${runInfo['time']} by user ${runInfo['user']} on ${runInfo['machine']}
    </p>
    
    ## show information on each of the files we're comparing (should only be two)
    % for fileKey in sorted(list(files)) :
        <% tempFileInfo = files[fileKey] %>
        <p>
            ${fileKey}:
            % if tempFileInfo.has_key('displayName') :
                ${tempFileInfo['displayName']}
            % endif
            <blockquote>
                path: ${tempFileInfo['path']} <br>
                md5sum for ${fileKey}: ${tempFileInfo['md5sum']} <br>
                last modified: ${tempFileInfo['lastModifiedTime']}
            </blockquote>
        </p>
    % endfor
    
    ## display info on the config file that was used, if one was
    % if ('config_file_name' in runInfo) and (runInfo['config_file_name'] is not None) :
        <p>
            A configuration file was used to control the production report.<br>
            Please see <a href="${runInfo['config_file_name']}">this copy of the configuration file</a>
            for details.
        </p>
    % endif
    
    ## display the latitude and longitude variable names
    <p>
        % if ('latitude_alt_name_in_b' in runInfo) :
            latitude in A: ${runInfo['latitude']}<br>
            latitude in B: ${runInfo['latitude_alt_name_in_b']}<br>
        % else :
            latitude: ${runInfo['latitude']} <br>
        % endif
        % if ('longitude_alt_name_in_b' in runInfo) :
            longitude in A: ${runInfo['longitude']}<br>
            longitude in B: ${runInfo['longitude_alt_name_in_b']}<br>
        % else :
            longitude: ${runInfo['longitude']}<br>
        % endif
        
         % if ('lon_lat_epsilon' in runInfo) and (runInfo['lon_lat_epsilon'] > 0.0) :
            longitude/latitude comparison epsilon: ${runInfo['lon_lat_epsilon']}<br>
        % endif
        
        <br>
        ## display information about any data filtering on the lons/lats
        % if ('data_filter_function_lat_in_a' in runInfo) and (not (runInfo['data_filter_function_lat_in_a'] is None)) :
            Note: The latitude in file A was filtered.
            Please see <a href="${runInfo['config_file_name']}">this copy of
            the original configuration file</a> to view the data filtering function.<br>
        % endif
        % if ('data_filter_function_lat_in_b' in runInfo) and (not (runInfo['data_filter_function_lat_in_b'] is None)) :
            Note: The latitude in file B was filtered.
            Please see <a href="${runInfo['config_file_name']}">this copy of
            the original configuration file</a> to view the data filtering function.<br>
        % endif
        % if ('data_filter_function_lon_in_a' in runInfo) and (not (runInfo['data_filter_function_lon_in_a'] is None)) :
            Note: The longitude in file A was filtered.
            Please see <a href="${runInfo['config_file_name']}">this copy of
            the original configuration file</a> to view the data filtering function.<br>
        % endif
        % if ('data_filter_function_lon_in_b' in runInfo) and (not (runInfo['data_filter_function_lon_in_b'] is None)) :
            Note: The longitude in file B was filtered.
            Please see <a href="${runInfo['config_file_name']}">this copy of
            the original configuration file</a> to view the data filtering function.<br>
        % endif
    </p>
    
    ## if there is a problem with the longitude/latitude correlation between the two files,
    ## make a nice big warning for the user
    % if spatial.has_key('lon_lat_not_equal_points_count') and (spatial['lon_lat_not_equal_points_count'] > 0) :
        <p>
            WARNING: ${spatial['lon_lat_not_equal_points_count']} data points
            (${report.make_formatted_display_string(spatial['lon_lat_not_equal_points_percent'])}% of all data)
            show possible mismatch in values stored in file a
            and file b longitude and latitude values. Depending on the degree of mismatch, some data value comparisons
            in this report may be distorted or spatially nonsensical. Please consider re-running this report and including an
            examination of your longitude and latitude variables with appropriate epsilons in order to analyze the significance
            of the difference.<br>
            ## if we're showing images, link to graphs showing the problem
            % if runInfo['shouldIncludeImages'] :
                <a href="./LonLatMismatch.A.png">
                    View mismatching points in A's lon/lat system
                </a><br>
                <a href="./LonLatMismatch.B.png">
                    View mismatching points in B's lon/lat system
                </a>
            % endif
        </p>
    % endif
    
    ## if we have some unique spatially invalid points, report them
    ## are there any in file A?
    %if spatial.has_key('file A') and spatial['file A'].has_key('numInvPts') and (spatial['file A']['numInvPts'] > 0) :
        <%
            fileAInfo = spatial['file A']
        %>
        <p>
            % if runInfo['shouldIncludeImages'] :
                <a href="./SpatialMismatch.A.png"><img src="./SpatialMismatch.A.small.png"></a><br>
            % endif
            File A has ${fileAInfo['numInvPts']} valid data points not present in File B.<br>
            File A has a total of ${report.make_formatted_display_string(fileAInfo['perInvPts'])}% invalid longitude/latitude data. <br>
        </p>
    % endif
    ## are there any in file B?
    %if spatial.has_key('file B') and spatial['file B'].has_key('numInvPts') and (spatial['file B']['numInvPts'] > 0) :
        <%
            fileBInfo = spatial['file B']
        %>
        <p>
            % if runInfo['shouldIncludeImages'] :
                <a href="./SpatialMismatch.B.png"><img src="./SpatialMismatch.B.small.png"></a><br>
            % endif
            File B has ${fileBInfo['numInvPts']} valid data points not present in File A.<br>
            File B has a total of ${report.make_formatted_display_string(fileBInfo['perInvPts'])}% longitude/latitude invalid data. <br>
        </p>
    % endif
    ## report on shared spatial invalidity if there is any
    % if spatial.has_key('perInvPtsInBoth') :
        <% perInBoth = spatial['perInvPtsInBoth'] %>
        % if perInBoth > 0 :
            <p>
                lon/lat data that is invalid in either file A or file B: ${report.make_formatted_display_string(perInBoth)}%
            </p>
        % endif
    % endif
    
    % if len(variables.keys()) > 0 : 
    
        <h3>Compared Variables</h3>
        
        ## report on all the variables that were compared and give a basic stat idea of how well they did
        <blockquote>
            <p>
                ## TODO replace the table with floating boxes at some point
                <table> 
                    
                    % for variableKey in sorted(list(variables)) :
                        <%
                            # get some information about the variable, for convenience
                            tempVariableInfo = variables[variableKey]
                            tempVarRunInfo   = tempVariableInfo['variable_run_info']
                            
                            technicalName  = tempVarRunInfo['variable_name']
                            varDisplayName = technicalName
                            if 'display_name' in tempVarRunInfo :
                                varDisplayName = tempVarRunInfo['display_name']
                            
                            passPercent          = tempVariableInfo['pass_epsilon_percent']
                            finiteSimilarPercent = tempVariableInfo['finite_similar_percent']
                            didPass              = tempVarRunInfo['did_pass']
                        %>
                        <tr>
                            <td>
                                % if not (didPass is None) :
                                    %if didPass :
                                        <img src="./pass.gif">
                                    %else :
                                        <img src="./fail.gif">
                                    % endif
                                % endif
                            </td>
                            <td>
                                Variable: <a href="${tempVarRunInfo['variable_report_path_escaped']}">${varDisplayName}</a> <br>
                                Epsilon used: ${tempVarRunInfo['epsilon']} <br>
                                Finite values within one epsilon of difference:
                                ${report.make_formatted_display_string(passPercent, '%.6g')}%<br>
                                Data that matched in finite-ness between the files:
                                ${report.make_formatted_display_string(finiteSimilarPercent, '%.6g')}%
                            </td>
                        </tr>
                    % endfor
                </table>
            </p>
        </blockquote>
    
    % endif
    
    ## report the names of variables shared between the two files
    <% sharedVars = varNames['sharedVars'] %>
    % if len(sharedVars) > 0 :
        <h3>Shared Variables</h3>
        <p>
            The following variables were common to both files: <br>
            <blockquote>
                % for varName in sharedVars :
                    ${varName} <br>
                % endfor
            </blockquote>
        </p>
    % endif
    
    ## check to see if there are any unique variables we need to report
    <%
        uniqueToAVars = varNames['uniqueToAVars']
        uniqueToBVars = varNames['uniqueToBVars']
    %>
    % if (len(uniqueToAVars) > 0) or (len(uniqueToBVars) > 0) :
        <h3>Unique Variables</h3>
        
        % if (len(uniqueToAVars) > 0) :
            <p>
                Variables only found in file A:
                <blockquote>
                    %for varName in uniqueToAVars :
                        ${varName} <br>
                    % endfor
                </blockquote>
            </p>
        % endif
        
        % if (len(uniqueToBVars) > 0) :
            <p>
                Variables only found in file B:
                <blockquote>
                    %for varName in uniqueToBVars :
                        ${varName} <br>
                    % endfor
                </blockquote>
            </p>
        % endif
    
    % endif
    
</body>
</html>

