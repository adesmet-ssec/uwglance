<%doc>
This Mako template is intended to create a summary report page for glance reportGen.

Created by Eva Schiffer Jun 2009.
Copyright (c) 2009 University of Wisconsin SSEC. All rights reserved.
</%doc>

<%!
    import glance.report as report
%>

<title>Spacial File Comparison</title>
</head>
<body>
    
    <h2>Comparison Summary</h2>
    
    <p>
        comparison produced ${runInfo['time']} by user ${runInfo['user']} on ${runInfo['machine']}
    </p>
    
    ## show information on each of the files we're comparing (should only be two)
    % for fileKey in sorted(list(files)) :
        <% tempFileInfo = files[fileKey] %>
        <p>
            ${fileKey}:
            % if tempFileInfo.has_key('displayName') :
                ${tempFileInfo['displayName']}
            % endif
            <blockquote>
                file path: ${tempFileInfo['path']} <br>
                md5sum for ${fileKey}: ${tempFileInfo['md5sum']} <br>
                last modified: ${tempFileInfo['lastModifiedTime']}
            </blockquote>
        </p>
    % endfor
    
    ## display the latitude and longitude variable names
    <p>
        % if ('latitude_alt_name_in_b' in runInfo) :
            latitude in A: ${runInfo['latitude']}<br>
            latitude in B: ${runInfo['latitude_alt_name_in_b']}<br>
        % else :
            latitude: ${runInfo['latitude']} <br>
        % endif
        % if ('longitude_alt_name_in_b' in runInfo) :
            longitude in A: ${runInfo['longitude']}<br>
            longitude in B: ${runInfo['longitude_alt_name_in_b']}<br>
        % else :
            longitude: ${runInfo['longitude']}<br>
        % endif
    </p>
    
    ## if there is a problem with the longitude/latitude correlation between the two files,
    ## make a nice big warning for the user
    % if spatial.has_key('num_lon_lat_not_equal_points') and (spatial['num_lon_lat_not_equal_points'] > 0) :
        <p>
            WARNING: ${spatial['num_lon_lat_not_equal_points']} data points show possible mismatch in values stored in file a
            and file b longitude and latitude values. Depending on the degree of mismatch, some data value comparisons
            in this report may be distorted or spacially nonsensical. Please consider re-running this report and including an
            examination of your longitude and latitude variables with appropriate epsilons in order to analyze the significance
            of the difference.<br>
            ## if we're showing images, link to graphs showing the problem
            % if runInfo['shouldIncludeImages'] :
                <a href="./LonLatMismatch.A.png">
                    View mismatching points in A's lon/lat system
                </a><br>
                <a href="./LonLatMismatch.B.png">
                    View mismatching points in B's lon/lat system
                </a>
            % endif
        </p>
    % endif
    
    ## if we have some unique spacially invalid points, report them
    <% haveUniqueSpacialInvalidity = False %>
    ## we will assume the whole substructure will be present if there's a problem with file A
    ## that we need to report on specifically
    %if spatial.has_key('file A') and spatial['file A'].has_key('numInvPts') and (spatial['file A']['numInvPts'] > 0) :
        <%
            fileAInfo = spatial['file A']
            haveUniqueSpacialInvalidity = True
        %>
        <p>
            File A has
            % if runInfo['shouldIncludeImages'] :
                <a href="./SpatialMismatch.A.png">
            % endif
            ${fileAInfo['numInvPts']} spacially valid data points not present in File B.<br>
            % if runInfo['shouldIncludeImages'] :
                </a>
            % endif
            File A has a total of ${report.make_formatted_display_string(fileAInfo['perInvPts'])}% spacially invalid data. <br>
        </p>
    % endif
    ## we will assume the whole substructure will be present if there's a problem with file B
    ## that we need to report on specifically
    %if spatial.has_key('file B') and spatial['file B'].has_key('numInvPts') and (spatial['file B']['numInvPts'] > 0) :
        <%
            fileBInfo = spatial['file B']
            haveUniqueSpacialInvalidity = True
        %>
        <p>
            File B has
            % if runInfo['shouldIncludeImages'] :
                <a href="./SpatialMismatch.B.png">
            % endif
            ${fileBInfo['numInvPts']} spacially valid data points not present in File A.<br>
            % if runInfo['shouldIncludeImages'] :
                </a>
            % endif
            File B has a total of ${report.make_formatted_display_string(fileBInfo['perInvPts'])}% spacially invalid data. <br>
        </p>
    % endif
    ## report on shared spatial invalidity if there is any
    % if spatial.has_key('perInvPtsInBoth') :
        <% perInBoth = spatial['perInvPtsInBoth'] %>
        % if perInBoth > 0 :
            <p>
                data that is spacially invalid in either file: ${report.make_formatted_display_string(perInBoth)}%
            </p>
        % endif
    % endif
    
    <h3>Compared Variables</h3>
    
    ## report on all the variables that were compared and give a basic stat idea of how well they did
    <blockquote>
        <p>
            % for variableName in sorted(list(variables)) :
                <%
                    tempVariableInfo = variables[variableName]
                    varDisplayName = variableName
                    if (tempVariableInfo['variable_run_info'].has_key('display_name')) :
                        varDisplayName = tempVariableInfo['variable_run_info']['display_name']
                %>
                Variable: <a href="${variableName | u}.html">${varDisplayName}</a> <br>
                Epsilon used: ${tempVariableInfo['variable_run_info']['epsilon']} <br>
                Finite values within one epsilon of difference:
                ${report.make_formatted_display_string(tempVariableInfo['pass_epsilon_percent'])}% <br>
                <br>
            % endfor
        </p>
    </blockquote>
    
    ## report the names of variables shared between the two files
    <% sharedVars = varNames['sharedVars'] %>
    % if len(sharedVars) > 0 :
        <h3>Shared Variables</h3>
        <p>
            The following variables were common to both files: <br>
            <blockquote>
                % for varName in sharedVars :
                    ${varName} <br>
                % endfor
            </blockquote>
        </p>
    % endif
    
    ## check to see if there are any unique variables we need to report
    <%
        uniqueToAVars = varNames['uniqueToAVars']
        uniqueToBVars = varNames['uniqueToBVars']
    %>
    % if (len(uniqueToAVars) > 0) or (len(uniqueToBVars) > 0) :
        <h3>Unique Variables</h3>
        
        % if (len(uniqueToAVars) != 0) :
            <p>
                Variables only found in file A:
                <blockquote>
                    %for varName in uniqueToAVars :
                        ${varName} <br>
                    % endfor
                </blockquote>
            </p>
        % endif
        
        % if (len(uniqueToBVars) != 0) :
            <p>
                Variables only found in file B:
                <blockquote>
                    %for varName in uniqueToBVars :
                        ${varName} <br>
                    % endfor
                </blockquote>
            </p>
        % endif
    
    % endif
    
</body>
</html>

